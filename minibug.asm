; MINI-BUG
; COPYWRITE 1973, MOTOROLA INC
; REV 004 (USED WITH MIKBUG)

DL11RCSR        =       0177560
DL11RBUF        =       0177562
DL11XCSR        =       0177564
	TXRDY   =       0200
DL11XBUF        =       0177566

STACK		=	02000

;	.BASE	140000
	.ORG	140000

START:	MOV	$STACK,SP
	MOV	$BANNER,R1
	JSR	PC,PUTS
	JMP	CONTRL

BANNER:	.ASCIZ	"PDP-11 MiniBug\r\n"
	.ALIGN	1

PUTC:	BITB	$TXRDY,*$DL11XCSR
	BEQ	PUTC
	MOVB	R0,*$DL11XBUF
	RTS	PC

1:	JSR	PC,PUTC		; write char
PUTS:	MOVB	(R1)+,R0	; load xmt char
	BNE	1b		; string is terminated with 0
	RTS	PC

OUTHL:	ASH	$-4,R0		; OUT HEX LEFT BCD DIGIT
OUTHR:	BIC	$~17,R0		; OUT HEX RIGHT BCD DIGIT
	ADD	$'0',R0
	CMPB	R0,$'9'
	BLE	1f
	ADD	$7,R0
1:	BR	PUTC

OUT2H:	MOVB	(R1),R0		; OUTPUT 2 HEX CHAR
	JSR	PC,OUTHL	; OUT LEFT HEX CHAR
	MOVB	(R1)+,R0
	BR	OUTHR		; OUT RIGHT HEX CHAR

OUT2HS:	JSR	PC,OUT2H	; OUTPUT 2 HEX CHAR + SPACE
OUTS:	MOVB	$' ',R0		; SPACE
	BR	PUTC		; (JSR & RTS)

OUTCR:	MOVB	$'\r',R0
	JSR	PC,PUTC
	MOVB	$'\n',R0
	BR	PUTC

GETC:	MOVB    *$DL11RCSR,R0
	BEQ	GETC
	MOVB    *$DL11RBUF,R0
	CMPB    R0,$127
	BEQ	GETC
	JSR     PC,PUTC		; ECHO CHAR
	CMPB    R0,$172
	BGT     1f		; ABOVE Z
	CMPB    R0,$141
	BLT     1f		; BELOW A
	BICB    $40,R0		; CONVERT TO UPPER CASE
1:	RTS	PC

INHEX:	JSR	PC,GETC
	CMPB	R0,$'0'
	BLT	ERROR		; NOT HEX
	CMPB	R0,$'9'
	BLE	1f
	CMPB	R0,$'A'
	BLT	ERROR		; NOT HEX
	CMPB	R0,$'F'
	BGT	ERROR		; NOT HEX
	SUB	$7,R0
1:	RTS	PC

; BUILD ADDRESS
BADDR:	JSR	PC,BYTE            ; READ 2 FRAMES
	SWAB	R0
	MOV	R0,R1
	JSR	PC,BYTE
	ADD	R0,R1
	RTS	PC

PUTHEX:
	MOV	R0,-(SP)
	MOV	R0,-(SP)
	JSR	PC,OUTHL
	MOV	(SP)+,R0
	JSR	PC,OUTHR
	MOV	(SP)+,R0
	RTS	PC

; INPUT BYTE (TWO NIBBLES)
BYTE:	MOV	R2,-(SP)
	JSR	PC,INHEX
	BIC	$~17,R0
	ASH	$4,R0
	MOV	R0,R2
	JSR	PC,INHEX
	BIC	$~17,R0
	ADD	R2,R0
	ADD	R0,R4
	MOV	(SP)+,R2
	RTS	PC

LOAD:	JSR	PC,GETC
	CMPB	R0,$'S'
	BNE	LOAD		; 1ST CHAR NOT (S)
	JSR	PC,GETC		; READ CHAR
	CMPB	R0,$'9'
	BEQ	3f
	CMPB	R0,$'1'
	BNE	LOAD		; 2ND CHAR NOT (1)
	CLRB	R4		; ZERO CHECKSUM
	JSR	PC,BYTE		; READ LENGTH BYTE
	MOVB	R0,R2
	SUB	$2,R2		; SUB ADDRESS LENGTH
	JSR	PC,BADDR	; BUILD ADDRESS INTO R1
1:	JSR	PC,BYTE
	DEC	R2
	BEQ	2f
	MOVB	R0,(R1)		; STORE PATH
	CMPB	(R1)+,R0
	BNE	ERROR		; MEMORY DID NOT CHANGE
	BR	1b		; ZERO BYTE COUNT
2:	INC	R4
	BEQ	LOAD
ERROR:	MOVB	$'?',R0		; PRINT QUESTION MARK
	JSR	PC,PUTC
3:	BR	CONTRL

DUMP:	JSR	PC,BADDR
	JSR	PC,OUTS
	JSR	PC,BYTE
	MOV	R0,R2
	JSR	PC,OUTCR
1:	JSR	PC,OUT2HS
	DEC	R2
	BNE	1b
	BR	CONTRL

JUMP:	JSR	PC,BADDR	; BUILD ADDRESS
	JSR	PC,*R1
	BR	CONTRL

; CHANGE MEMORY (M AAAA DD NN)
CHANGE: JSR	PC,BADDR	; BUILD ADDRESS
1:	JSR	PC,OUTS		; PRINT SPACE
	JSR	PC,OUT2HS
	DEC	R1
	JSR	PC,BYTE
	MOV	R0,(R1)
	CMPB	(R1)+,R0
	BNE	ERROR		; MEMORY DID NOT CHANGE

;	JSR	PC,OUTCR
;	MOV	R1,R0
;	SWAB	R0
;	JSR	PC,PUTHEX
;	MOV	R1,R0
;	JSR	PC,PUTHEX
;	BR	1b

	BR	CONTRL

; PRINT CONTENTS OF STACK
PRINT:	MOV	SP,R1		; SAVE STACK POINTER
	MOV	$10,R2
1:	JSR	PC,OUT2HS	; OUT 2 HEX & SPACE
	DEC	R2
	BNE	1b
	BR	CONTRL

; ENTER POWER ON SEQUENCE
CONTRL:	MOV	$STACK,SP
	JSR	PC,OUTCR
	MOV	$'>',R0
	JSR	PC,PUTC
	JSR	PC,GETC		; READ CHARACTER
	MOV	R0,R1
	JSR	PC,OUTS		; PRINT SPACE
	CMPB	R1,$'D'
	BEQ	DUMP
	CMPB	R1,$'L'
	BEQ	LOAD
	CMPB	R1,$'M'
	BEQ	CHANGE
	CMPB	R1,$'P'
	BEQ	PRINT		; STACK
	CMPB	R1,$'J'
	BEQ	JUMP
	BR	CONTRL

	.END
